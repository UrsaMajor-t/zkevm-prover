// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hashdb.proto

#include "hashdb.pb.h"
#include "hashdb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hashdb {
namespace v1 {

static const char* HashDBService_method_names[] = {
  "/hashdb.v1.HashDBService/Set",
  "/hashdb.v1.HashDBService/Get",
  "/hashdb.v1.HashDBService/SetProgram",
  "/hashdb.v1.HashDBService/GetProgram",
  "/hashdb.v1.HashDBService/LoadDB",
  "/hashdb.v1.HashDBService/LoadProgramDB",
  "/hashdb.v1.HashDBService/Flush",
  "/hashdb.v1.HashDBService/SemiFlush",
  "/hashdb.v1.HashDBService/GetFlushStatus",
  "/hashdb.v1.HashDBService/GetFlushData",
};

std::unique_ptr< HashDBService::Stub> HashDBService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HashDBService::Stub> stub(new HashDBService::Stub(channel));
  return stub;
}

HashDBService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Set_(HashDBService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(HashDBService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProgram_(HashDBService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProgram_(HashDBService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadDB_(HashDBService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadProgramDB_(HashDBService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Flush_(HashDBService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SemiFlush_(HashDBService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlushStatus_(HashDBService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlushData_(HashDBService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HashDBService::Stub::Set(::grpc::ClientContext* context, const ::hashdb::v1::SetRequest& request, ::hashdb::v1::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Set_, context, request, response);
}

void HashDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::hashdb::v1::SetRequest* request, ::hashdb::v1::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::hashdb::v1::SetRequest* request, ::hashdb::v1::SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::Set(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::SetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::SetResponse>* HashDBService::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::hashdb::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::SetResponse>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::SetResponse>* HashDBService::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::hashdb::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::SetResponse>::Create(channel_.get(), cq, rpcmethod_Set_, context, request, false);
}

::grpc::Status HashDBService::Stub::Get(::grpc::ClientContext* context, const ::hashdb::v1::GetRequest& request, ::hashdb::v1::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void HashDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::hashdb::v1::GetRequest* request, ::hashdb::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::hashdb::v1::GetRequest* request, ::hashdb::v1::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetResponse>* HashDBService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetResponse>* HashDBService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status HashDBService::Stub::SetProgram(::grpc::ClientContext* context, const ::hashdb::v1::SetProgramRequest& request, ::hashdb::v1::SetProgramResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProgram_, context, request, response);
}

void HashDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::hashdb::v1::SetProgramRequest* request, ::hashdb::v1::SetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::SetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::hashdb::v1::SetProgramRequest* request, ::hashdb::v1::SetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::SetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::SetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::SetProgramResponse>* HashDBService::Stub::AsyncSetProgramRaw(::grpc::ClientContext* context, const ::hashdb::v1::SetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::SetProgramResponse>::Create(channel_.get(), cq, rpcmethod_SetProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::SetProgramResponse>* HashDBService::Stub::PrepareAsyncSetProgramRaw(::grpc::ClientContext* context, const ::hashdb::v1::SetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::SetProgramResponse>::Create(channel_.get(), cq, rpcmethod_SetProgram_, context, request, false);
}

::grpc::Status HashDBService::Stub::GetProgram(::grpc::ClientContext* context, const ::hashdb::v1::GetProgramRequest& request, ::hashdb::v1::GetProgramResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProgram_, context, request, response);
}

void HashDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::hashdb::v1::GetProgramRequest* request, ::hashdb::v1::GetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetProgramResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::hashdb::v1::GetProgramRequest* request, ::hashdb::v1::GetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::GetProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetProgramResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetProgramResponse>* HashDBService::Stub::AsyncGetProgramRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetProgramResponse>::Create(channel_.get(), cq, rpcmethod_GetProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetProgramResponse>* HashDBService::Stub::PrepareAsyncGetProgramRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetProgramRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetProgramResponse>::Create(channel_.get(), cq, rpcmethod_GetProgram_, context, request, false);
}

::grpc::Status HashDBService::Stub::LoadDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadDBRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadDB_, context, request, response);
}

void HashDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::LoadDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::AsyncLoadDBRaw(::grpc::ClientContext* context, const ::hashdb::v1::LoadDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::PrepareAsyncLoadDBRaw(::grpc::ClientContext* context, const ::hashdb::v1::LoadDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadDB_, context, request, false);
}

::grpc::Status HashDBService::Stub::LoadProgramDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadProgramDBRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadProgramDB_, context, request, response);
}

void HashDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::hashdb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::LoadProgramDB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadProgramDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::AsyncLoadProgramDBRaw(::grpc::ClientContext* context, const ::hashdb::v1::LoadProgramDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadProgramDB_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::PrepareAsyncLoadProgramDBRaw(::grpc::ClientContext* context, const ::hashdb::v1::LoadProgramDBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_LoadProgramDB_, context, request, false);
}

::grpc::Status HashDBService::Stub::Flush(::grpc::ClientContext* context, const ::hashdb::v1::FlushRequest& request, ::hashdb::v1::FlushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Flush_, context, request, response);
}

void HashDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::hashdb::v1::FlushRequest* request, ::hashdb::v1::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::FlushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::hashdb::v1::FlushRequest* request, ::hashdb::v1::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::Flush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::FlushResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::FlushResponse>* HashDBService::Stub::AsyncFlushRaw(::grpc::ClientContext* context, const ::hashdb::v1::FlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::FlushResponse>* HashDBService::Stub::PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::hashdb::v1::FlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::FlushResponse>::Create(channel_.get(), cq, rpcmethod_Flush_, context, request, false);
}

::grpc::Status HashDBService::Stub::SemiFlush(::grpc::ClientContext* context, const ::hashdb::v1::SemiFlushRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SemiFlush_, context, request, response);
}

void HashDBService::Stub::experimental_async::SemiFlush(::grpc::ClientContext* context, const ::hashdb::v1::SemiFlushRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SemiFlush_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::SemiFlush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SemiFlush_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::SemiFlush(::grpc::ClientContext* context, const ::hashdb::v1::SemiFlushRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SemiFlush_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::SemiFlush(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SemiFlush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::AsyncSemiFlushRaw(::grpc::ClientContext* context, const ::hashdb::v1::SemiFlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SemiFlush_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HashDBService::Stub::PrepareAsyncSemiFlushRaw(::grpc::ClientContext* context, const ::hashdb::v1::SemiFlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SemiFlush_, context, request, false);
}

::grpc::Status HashDBService::Stub::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::hashdb::v1::GetFlushStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFlushStatus_, context, request, response);
}

void HashDBService::Stub::experimental_async::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::hashdb::v1::GetFlushStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetFlushStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetFlushStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::hashdb::v1::GetFlushStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::GetFlushStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetFlushStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetFlushStatusResponse>* HashDBService::Stub::AsyncGetFlushStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetFlushStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetFlushStatusResponse>* HashDBService::Stub::PrepareAsyncGetFlushStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetFlushStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushStatus_, context, request, false);
}

::grpc::Status HashDBService::Stub::GetFlushData(::grpc::ClientContext* context, const ::hashdb::v1::GetFlushDataRequest& request, ::hashdb::v1::GetFlushDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFlushData_, context, request, response);
}

void HashDBService::Stub::experimental_async::GetFlushData(::grpc::ClientContext* context, const ::hashdb::v1::GetFlushDataRequest* request, ::hashdb::v1::GetFlushDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushData_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetFlushData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetFlushDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFlushData_, context, request, response, std::move(f));
}

void HashDBService::Stub::experimental_async::GetFlushData(::grpc::ClientContext* context, const ::hashdb::v1::GetFlushDataRequest* request, ::hashdb::v1::GetFlushDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushData_, context, request, response, reactor);
}

void HashDBService::Stub::experimental_async::GetFlushData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hashdb::v1::GetFlushDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFlushData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetFlushDataResponse>* HashDBService::Stub::AsyncGetFlushDataRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetFlushDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetFlushDataResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hashdb::v1::GetFlushDataResponse>* HashDBService::Stub::PrepareAsyncGetFlushDataRaw(::grpc::ClientContext* context, const ::hashdb::v1::GetFlushDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hashdb::v1::GetFlushDataResponse>::Create(channel_.get(), cq, rpcmethod_GetFlushData_, context, request, false);
}

HashDBService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::SetRequest, ::hashdb::v1::SetResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::SetRequest* req,
             ::hashdb::v1::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::GetRequest, ::hashdb::v1::GetResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::GetRequest* req,
             ::hashdb::v1::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::SetProgramRequest, ::hashdb::v1::SetProgramResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::SetProgramRequest* req,
             ::hashdb::v1::SetProgramResponse* resp) {
               return service->SetProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::GetProgramRequest, ::hashdb::v1::GetProgramResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::GetProgramRequest* req,
             ::hashdb::v1::GetProgramResponse* resp) {
               return service->GetProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::LoadDBRequest, ::google::protobuf::Empty>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::LoadDBRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->LoadDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::LoadProgramDBRequest, ::google::protobuf::Empty>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::LoadProgramDBRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->LoadProgramDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::FlushRequest, ::hashdb::v1::FlushResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::FlushRequest* req,
             ::hashdb::v1::FlushResponse* resp) {
               return service->Flush(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::SemiFlushRequest, ::google::protobuf::Empty>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::SemiFlushRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SemiFlush(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::google::protobuf::Empty, ::hashdb::v1::GetFlushStatusResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::hashdb::v1::GetFlushStatusResponse* resp) {
               return service->GetFlushStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HashDBService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HashDBService::Service, ::hashdb::v1::GetFlushDataRequest, ::hashdb::v1::GetFlushDataResponse>(
          [](HashDBService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::hashdb::v1::GetFlushDataRequest* req,
             ::hashdb::v1::GetFlushDataResponse* resp) {
               return service->GetFlushData(ctx, req, resp);
             }, this)));
}

HashDBService::Service::~Service() {
}

::grpc::Status HashDBService::Service::Set(::grpc::ServerContext* context, const ::hashdb::v1::SetRequest* request, ::hashdb::v1::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::Get(::grpc::ServerContext* context, const ::hashdb::v1::GetRequest* request, ::hashdb::v1::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::SetProgram(::grpc::ServerContext* context, const ::hashdb::v1::SetProgramRequest* request, ::hashdb::v1::SetProgramResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::GetProgram(::grpc::ServerContext* context, const ::hashdb::v1::GetProgramRequest* request, ::hashdb::v1::GetProgramResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::LoadDB(::grpc::ServerContext* context, const ::hashdb::v1::LoadDBRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::LoadProgramDB(::grpc::ServerContext* context, const ::hashdb::v1::LoadProgramDBRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::Flush(::grpc::ServerContext* context, const ::hashdb::v1::FlushRequest* request, ::hashdb::v1::FlushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::SemiFlush(::grpc::ServerContext* context, const ::hashdb::v1::SemiFlushRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::GetFlushStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::hashdb::v1::GetFlushStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HashDBService::Service::GetFlushData(::grpc::ServerContext* context, const ::hashdb::v1::GetFlushDataRequest* request, ::hashdb::v1::GetFlushDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hashdb
}  // namespace v1

